# -*- coding: utf-8 -*-
"""Titanic_classification_FinalVersion_Edited_KNS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JctReww12GqwtVkUCRg5BYz8Di_KuNFI
"""

#1
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
#2
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import scale
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
#3
from sklearn.metrics import mean_absolute_error, accuracy_score
#4
from tensorflow.keras.layers import Input, Dense, Activation,Dropout
#5
from tensorflow.keras.models import Model

#6
from google.colab import files
import io
uploaded_train = files.upload()

#6
df = pd.read_csv(io.BytesIO(uploaded_train['train.csv']), index_col='PassengerId')

#6
uploaded_test = files.upload()

#6
df_test = pd.read_csv(io.BytesIO(uploaded_test['test.csv']), index_col='PassengerId')

#7
df_test.columns

"""### Classify the features"""

#8
df.dtypes.unique

"""### Logistic Regression"""

#9
df['Family'] = df['SibSp']+df['Parch']

"""### Neural Network"""

#10
df = df.drop(columns=['SibSp', 'Parch'])

"""### Decision Tree"""

#11
df.isna().sum()

"""### Preprocess, and fit test data"""

#12
df = df.drop(columns=['Cabin'])

"""# Which approach did you choose and why?"""

#13
df.groupby(['Pclass'])['Age'].mean()

#14
df['Age'] = df['Age'].fillna(df.groupby(['Pclass'])['Age'].transform(np.mean))

#15
df['Embarked'] = df['Embarked'].fillna('S')

#16
df.isna().sum()

#17
sex_replace = {'female': 0, 'male': 1}

#17
df = df.replace({'Sex': sex_replace})
df.astype({'Sex':'float32'}).dtypes

#18
#Create features and labels
X = df[['Pclass', 'Sex', 'Age', 'Fare', 'Family']]

#19
y = df[['Survived']]

#20
X_scaled = scale(X)

#21
X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.2, random_state=101)

#22
print('X_train.shape: ', X_train.shape, 'y_train.shape: ', y_train.shape)

#23
input_layer = Input(shape=(X_train.shape[1]))
output = Dense(y_train.shape[1], activation='sigmoid')(input_layer)
model = Model(inputs=input_layer, outputs=output)

#24
from keras import layers, models
model.compile(optimizer='rmsprop', loss='mse', metrics=['acc'])

#25
print(model.summary())

#26
history = model.fit(X_train, y_train, batch_size=8, epochs=30, validation_split=0.2)

#27
score = model.evaluate(X_val, y_val)

#28
print("Test Score:", score[0])

#28
print("Test Accuracy:", score[1])

#29
layer_1 = Dense(15, activation='relu')(input_layer)
layer_2 = Dense(10, activation='relu')(layer_1)

#29
output = Dense(y_train.shape[1], activation='tanh')(layer_2)

#29
neural_net_model = Model(inputs=input_layer, outputs=output)

#30
neural_net_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])

#31
print(neural_net_model.summary())

#32
history = neural_net_model.fit(X_train, y_train, batch_size=8, epochs=50, verbose=1, validation_split=0.2)

#33
score = neural_net_model.evaluate(X_val, y_val, verbose=1)

#34
print("Test Score:", score[0], "Test Accuracy:", score[1])

#35
decision_tree_model = DecisionTreeClassifier(random_state=101, max_leaf_nodes=50)

#36
decision_tree_model.fit(X_train, y_train)

#37
predict_tree = decision_tree_model.predict(X_val)

#38
print('accuracy: ', accuracy_score(y_val, predict_tree))

#39
df_test['Family'] = df_test['SibSp'] + df_test['Parch']

#40
df_test.groupby(['Pclass'])['Age'].mean()

#41
df_test['Age'] = df_test['Age'].fillna(df_test.groupby(['Pclass'])['Age'].transform(np.mean))

#42
df_test['Embarked'] = df_test['Embarked'].fillna('S')

#43
sex_replace = {'female': 0, 'male': 1}
df_test = df_test.replace({'Sex': sex_replace})
df_test.astype({'Sex':'float32'}).dtypes

#44
Something = df_test[['Pclass', 'Sex', 'Age', 'Fare', 'Family']]
Something_scaled = scale(Something)

